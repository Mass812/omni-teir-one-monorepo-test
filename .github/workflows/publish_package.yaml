name: Publish Package
on:
  push:
    branches:
      - master

jobs:
  placeholder:
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder
        run: echo "This job is a placeholder to prevent GitHub from showing an error."

# jobs:
#   publish-gpr:
#     if: github.event.pull_request.merged
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version-file: '.nvmrc'
#           registry-url: https://npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}
#           scope: "@mass812"
#       - run: npm run install:all
#       - run: npm run install:all
#       - run: npm run build
#       - run: npm run test
#       - run: npm run format
#       - run: npm run publish
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Git Identity
#         # At the start of each workflow run, GitHub automatically creates a unique GITHUB_TOKEN secret to use in your workflow. 
#         #You can use the GITHUB_TOKEN to authenticate in a workflow run.
#         run: |
#           git config --global user.name 'github-actions[bot]'
#           git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#           git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
        
#       # Define ${CURRENT_VERSION}
#       - name: Set Current Version
#         run: |
#           CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
#           echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
#       - name: Tag Version Check
#         id: tag_check
#         run: |
#           GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
#           http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
#             -H "Authorization: token ${GITHUB_TOKEN}")
#           if [ "$http_status_code" -ne "404" ] ; then
#             echo "::set-output name=exists_tag::true"
#           else
#             echo "::set-output name=exists_tag::false"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Create Git Tag
#         if: steps.tag_check.outputs.exists_tag == 'false'
#         uses: pkgdeps/git-tag-action@v2
#         with:
#           version: ${{ env.CURRENT_VERSION }}
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           github_repo: ${{ github.repository }}
#           git_commit_sha: ${{ github.sha }}
#           git_tag_prefix: "v"
#       - name: Create Release
#         id: create_release
#         if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: v${{ env.CURRENT_VERSION }}
#           # Copy Pull Request's tile and body to Release Note
#           release_name: ${{ github.event.pull_request.title }}
#           body: |
#             ${{ github.event.pull_request.body }}
#           draft: false
#           prerelease: false
#       - name: Publish
#         if: steps.tag_check.outputs.exists_tag == 'false'
#         run: |
#           yarn lerna publish from-package --yes
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - uses: actions/github-script@v4
#         with:
#           github-token: ${{secrets.GITHUB_TOKEN}}
#           script: |
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: 'https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }} is released ðŸŽ‰'
#             })